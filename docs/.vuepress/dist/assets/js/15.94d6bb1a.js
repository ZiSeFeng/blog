(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{230:function(t,e,i){t.exports=i.p+"assets/img/20190823114905856.62e89226.png"},231:function(t,e,i){t.exports=i.p+"assets/img/20190823114911483.0b63916a.png"},275:function(t,e,i){"use strict";i.r(e);var _=i(7),v=Object(_.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[_("strong",[t._v("版本控制")]),t._v("\ngit本质是一个分布式版本控制系统，客户端可以完成clone整个仓库，然后进行提交和修改。")]),t._v(" "),_("h3",{attrs:{id:"一、了解github的工作流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、了解github的工作流","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、了解github的工作流")]),t._v(" "),_("p",[_("img",{attrs:{src:i(230),alt:"在这里插入图片描述"}}),t._v(" "),_("img",{attrs:{src:i(231),alt:"在这里插入图片描述"}}),t._v(" "),_("strong",[t._v("仓库")])]),t._v(" "),_("ol",[_("li",[t._v("远程仓库(remote)：远程主仓库github；")]),t._v(" "),_("li",[t._v("本地仓库(respository/history)：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；")]),t._v(" "),_("li",[t._v("暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里;")]),t._v(" "),_("li",[t._v("工作区：本地电脑存放项目文件的地方。")])]),t._v(" "),_("h3",{attrs:{id:"二、git-add提交到暂存区、出错怎么办？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、git-add提交到暂存区、出错怎么办？","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、git add提交到暂存区、出错怎么办？")]),t._v(" "),_("p",[t._v("提交流程为：")]),t._v(" "),_("div",{staticClass:"language-mermaid line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("flowchat\nst=>start: Workspace 工作区\ngit status=>operation: git statut 查看状态\ngit add=>operation: git add .将所有修改加入暂存区\ngit commit -m 'first commit'=>operation: git commit -m 'first commit'将代码提交到本地仓库\ngit push=>operation: git push将本地仓库代码更新到远程仓库\ne=>end: Remote\nst->git status->git add->git commit -m 'first commit'->git push->e\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br")])]),_("p",[_("strong",[t._v("场景1：")]),t._v("\n当你改乱了暂存区某个文件的内容，想直接丢弃暂存区的修改时")]),t._v(" "),_("blockquote",[_("p",[t._v("git checkout --<文件名>")])]),t._v(" "),_("p",[_("strong",[t._v("场景2：")]),t._v("\n当你不但改乱了暂存区某个文件的内容，还添加到了本地仓库时，想丢弃修改")]),t._v(" "),_("blockquote",[_("p",[t._v("第一步 git reset HEAD file\n第二步 git checkout <文件名>")])]),t._v(" "),_("h3",{attrs:{id:"三、git-commit提交到本地仓库，出错怎么办？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、git-commit提交到本地仓库，出错怎么办？","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、git commit提交到本地仓库，出错怎么办？")]),t._v(" "),_("h4",{attrs:{id:"_1-提交信息出错"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-提交信息出错","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.提交信息出错")]),t._v(" "),_("p",[t._v("更改"),_("code",[t._v("commit")]),t._v("信息")]),t._v(" "),_("blockquote",[_("p",[t._v("git commit --amend -m 'new message'")])]),t._v(" "),_("h4",{attrs:{id:"_2-漏提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-漏提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.漏提交")]),t._v(" "),_("p",[t._v("commit时，遗漏提交部分更新，有两种解决方案")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("方案一：再次"),_("code",[t._v("commit")]),t._v("，此时，git上会出现两次"),_("code",[t._v("commit")])]),t._v(" "),_("blockquote",[_("p",[t._v("git commit -m 'message'")])])]),t._v(" "),_("li",[_("p",[t._v("方案二：遗漏文件提交到之前"),_("code",[t._v("commit")]),t._v("上。--no-edit表示提交信息不会更改，在git上仅为一次提交")])])]),t._v(" "),_("blockquote",[_("p",[t._v("git add missed-file （missed-file 为遗漏提交文件）\ngit commit --amend --no-edit")])]),t._v(" "),_("h4",{attrs:{id:"_3-提交错误文件，回退到上一个commit版本，再commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-提交错误文件，回退到上一个commit版本，再commit","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.提交错误文件，回退到上一个commit版本，再commit")]),t._v(" "),_("p",[_("strong",[t._v("git reset")]),t._v("\n把暂存区的修改撤销掉"),_("code",[t._v("unstage")]),t._v("，重新放回工作区")]),t._v(" "),_("blockquote",[_("p",[t._v("git reset HEAD <文件名>")])]),t._v(" "),_("p",[t._v("git版本回退，回到到特定的"),_("code",[t._v("commit_id")]),t._v("版本，可以通过"),_("code",[t._v("git log")]),t._v("查看提交历史，以便确认要回退到哪个版本"),_("code",[t._v("commit")]),t._v("之后的即为ID")]),t._v(" "),_("blockquote",[_("p",[t._v("git reset --hard commit_id")])]),t._v(" "),_("p",[t._v("将版本库回退1个版本，不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码也回退到这个版本")]),t._v(" "),_("blockquote",[_("p",[t._v("git reset --hard HEAD~1")])]),t._v(" "),_("p",[t._v("修改版本库，保留暂存区，保留工作区\n将版本库软回退1个版本，软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区。")]),t._v(" "),_("blockquote",[_("p",[t._v("git reset --soft HEAD~1")])]),t._v(" "),_("p",[_("strong",[t._v("git revert")]),t._v("\n撤销某次操作，此次操作之前和之后的"),_("code",[t._v("commi")]),t._v("t和"),_("code",[t._v("history")]),t._v("会保留，并且把这次撤销作为一次最新的提交")]),t._v(" "),_("p",[t._v("撤销前一次commit")]),t._v(" "),_("blockquote",[_("p",[t._v("git revert HEAD")])]),t._v(" "),_("p",[t._v("撤销前2次commit")]),t._v(" "),_("blockquote",[_("p",[t._v("git revert HEAD^")])]),t._v(" "),_("p",[t._v("撤销指定的版本，撤销也会作为一次提交进行保存。")]),t._v(" "),_("blockquote",[_("p",[t._v("git revert commit")])]),t._v(" "),_("p",[_("code",[t._v("git revert")]),t._v("是提交一个新的版本，将需要"),_("code",[t._v("revert")]),t._v("的版本的内容再方向修改回去，版本递增，不影响之前提交的内容")]),t._v(" "),_("p",[_("strong",[_("code",[t._v("git revert")]),t._v("和"),_("code",[t._v("git reset")]),t._v("的区别")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git revert")]),t._v("是用一次新的commit来回滚之前的commit，"),_("code",[t._v("git reset")]),t._v("是直接删除指定的commit。")]),t._v(" "),_("li",[t._v("在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为"),_("code",[t._v("git revert")]),t._v("是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是"),_("code",[t._v("git rese")]),t._v("t直接把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。")]),t._v(" "),_("li",[_("code",[t._v("git reset")]),t._v(" 是把HEAD向后移动了一下，而"),_("code",[t._v("git revert")]),t._v("是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。")])]),t._v(" "),_("h3",{attrs:{id:"四、常用命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、常用命令","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、常用命令")]),t._v(" "),_("h4",{attrs:{id:"_1-初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始化","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.初始化")]),t._v(" "),_("ul",[_("li",[t._v("新建本地仓库"),_("code",[t._v("git init")])]),t._v(" "),_("li",[t._v("克隆"),_("code",[t._v("git clone <url>")])])]),t._v(" "),_("h4",{attrs:{id:"_2-提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.提交")]),t._v(" "),_("ul",[_("li",[t._v("提交所有"),_("code",[t._v("git add .")])]),t._v(" "),_("li",[t._v("提交指定文件"),_("code",[t._v("git add <file1> <file2>")])]),t._v(" "),_("li",[t._v("提交文件夹中所有文件到暂存区"),_("code",[t._v("git add [dir]")])])]),t._v(" "),_("h4",{attrs:{id:"_3-撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-撤销","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.撤销")]),t._v(" "),_("ul",[_("li",[t._v("删除工作区文件，并且删除暂存区文件记录"),_("code",[t._v("git rm <file1> <file2>")])]),t._v(" "),_("li",[t._v("删除暂存区文件，工作区还存在"),_("code",[t._v("git rm --cached <file>")])]),t._v(" "),_("li",[t._v("取消暂存区已暂存文件"),_("code",[t._v("git reset HEAD <file")])]),t._v(" "),_("li",[t._v("撤销上一次对文件的操作"),_("code",[t._v("git checkout --<file>")])])]),t._v(" "),_("h4",{attrs:{id:"_4-暂存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-暂存","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.暂存")]),t._v(" "),_("ul",[_("li",[t._v("添加缓存栈： "),_("code",[t._v("git stash")]),t._v(" ;")]),t._v(" "),_("li",[t._v("查看缓存栈： "),_("code",[t._v("git stash list")]),t._v(" ;")]),t._v(" "),_("li",[t._v("推出缓存栈： "),_("code",[t._v("git stash pop")]),t._v(" ;")]),t._v(" "),_("li",[t._v("取出最新缓存：\t"),_("code",[t._v("git stash apply")]),t._v(";")]),t._v(" "),_("li",[t._v("取出特定缓存内容： "),_("code",[t._v("git stash apply stash@{1}")])])]),t._v(" "),_("h4",{attrs:{id:"_5-更新文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-更新文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.更新文件")]),t._v(" "),_("ul",[_("li",[t._v("重命令文件，并将已改文件提交暂存区："),_("code",[t._v("git mv <file-origin> [file-rename>")]),t._v(";")])]),t._v(" "),_("h4",{attrs:{id:"_6-查看信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-查看信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.查看信息")]),t._v(" "),_("ul",[_("li",[t._v("查看当前工作区所有文件的状态: "),_("code",[t._v("git status")]),t._v(";")]),t._v(" "),_("li",[t._v("比较工作区中当前文件和暂存区之间的差异，修改之后没有暂存的内容：`git diff``")]),t._v(" "),_("li",[t._v("查看提交历史："),_("code",[t._v("git log")]),t._v("；参数-p展开每次提交的内容差异，用-2显示最近的两次更新，如"),_("code",[t._v("git log -p -2")]),t._v(";")])]),t._v(" "),_("h4",{attrs:{id:"_7-提交文件到版本库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-提交文件到版本库","aria-hidden":"true"}},[t._v("#")]),t._v(" 7.提交文件到版本库")]),t._v(" "),_("ul",[_("li",[t._v('将暂存区中的文件提交到本地仓库中，即打上新版本：git commit -m "commit_info";')]),t._v(" "),_("li",[t._v('将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：git commit -a -m "commit_info";')]),t._v(" "),_("li",[t._v("提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：git commit --amend;")])]),t._v(" "),_("h4",{attrs:{id:"_8-标签"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 8.标签")]),t._v(" "),_("ul",[_("li",[t._v("列出现在所有的标签："),_("code",[t._v("git tag")]),t._v(";")]),t._v(" "),_("li",[t._v("使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣："),_("code",[t._v('git tag -l "v1.4.2.*"')]),t._v(";")]),t._v(" "),_("li",[t._v("创建一个含附注类型的标签，需要加-a参数，如"),_("code",[t._v('git tag -a v1.4 -m "my version 1.4"')]),t._v(";")]),t._v(" "),_("li",[t._v("使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象："),_("code",[t._v("git show v1.4")]),t._v(";")]),t._v(" "),_("li",[t._v("如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用-s参数："),_("code",[t._v('git tag -s v1.5 -m "my signed 1.5 tag"')]),t._v(";")]),t._v(" "),_("li",[t._v("验证已签署的标签："),_("code",[t._v("git tag -v")]),t._v("，如"),_("code",[t._v("git tag -v v1.5")]),t._v(";")]),t._v(" "),_("li",[t._v("创建一个轻量级标签的话，就直接使用git tag命令即可，连-a,-s以及-m选项都不需要，直接给出标签名字即可，如"),_("code",[t._v("git tag v1.5")]),t._v(";")]),t._v(" "),_("li",[t._v("将标签推送到远程仓库中："),_("code",[t._v("git push origin")]),t._v(" ，如"),_("code",[t._v("git push origin v1.5")]),t._v("；")]),t._v(" "),_("li",[t._v("将本地所有的标签全部推送到远程仓库中："),_("code",[t._v("git push origin --tags")]),t._v(";")])]),t._v(" "),_("h4",{attrs:{id:"_9-分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.分支")]),t._v(" "),_("ul",[_("li",[t._v("创建本地分支 "),_("code",[t._v("git branch 分支名")])]),t._v(" "),_("li",[t._v("查看本地分支"),_("code",[t._v("git branch")])]),t._v(" "),_("li",[t._v("查看远程分支 "),_("code",[t._v("git branch -a")])]),t._v(" "),_("li",[t._v("切换分支 "),_("code",[t._v("git checkout 分支名")]),t._v(" (一般修改未提交则无法切换，大小写问题经常会有，可强制切换  "),_("code",[t._v("git checkout 分支名 -f")]),t._v("  非必须慎用)")]),t._v(" "),_("li",[t._v("将本地分支推送到远程分支 "),_("code",[t._v("git push <远程仓库> <本地分支>:<远程分支>")])]),t._v(" "),_("li",[t._v("从远程仓库中抓取本地仓库中没有更新"),_("code",[t._v("git fetch")])]),t._v(" "),_("li",[t._v("拉取远程分支仓库"),_("code",[t._v("git pull")])]),t._v(" "),_("li",[t._v("推送本地分支到远程分支"),_("code",[t._v("git push")])]),t._v(" "),_("li",[t._v("拉取远程新分支 "),_("code",[t._v("git checkout -b serverfix origin/serverfix")])]),t._v(" "),_("li",[t._v("合并本地分支 "),_("code",[t._v("git merge hotfix")]),t._v("：(将 hotfix 分支合并到当前分支)")]),t._v(" "),_("li",[t._v("合并远程分支 "),_("code",[t._v("git merge origin/serverfix")])]),t._v(" "),_("li",[t._v("删除本地分支 "),_("code",[t._v("git branch -d hotfix")]),t._v("：(删除本地 hotfix 分支)")]),t._v(" "),_("li",[t._v("删除远程分支 "),_("code",[t._v("git push origin --delete serverfix")])]),t._v(" "),_("li",[t._v("移除远程仓库\tgit remote rm [remote-name]`")]),t._v(" "),_("li",[t._v("上传新命名的本地分支："),_("code",[t._v("git push origin newName")]),t._v(";")]),t._v(" "),_("li",[t._v("创建新分支："),_("code",[t._v("git branch branchName")]),t._v("：(创建名为 branchName 的本地分支)")]),t._v(" "),_("li",[t._v("切换到新分支："),_("code",[t._v("git checkout branchName")]),t._v("：(切换到 branchName 分支)")]),t._v(" "),_("li",[t._v("创建并切换分支："),_("code",[t._v("git checkout -b branchName")]),t._v("：(相当于以上两条命令的合并)")]),t._v(" "),_("li",[t._v("查看本地分支："),_("code",[t._v("git branch")])]),t._v(" "),_("li",[t._v("查看远程仓库所有分支："),_("code",[t._v("git branch -a")])]),t._v(" "),_("li",[t._v("本地分支重命名： "),_("code",[t._v("git branch -m oldName newName")])]),t._v(" "),_("li",[t._v("重命名远程分支对应的本地分支："),_("code",[t._v("git branch -m oldName newName")])]),t._v(" "),_("li",[t._v("把修改后的本地分支与远程分支关联："),_("code",[t._v("git branch --set-upstream-to origin/newName")])]),t._v(" "),_("li",[t._v("修改远程仓库在本地的简称："),_("code",[t._v("git remote rename [old-name] [new-name]")])]),t._v(" "),_("li",[t._v("查看远程仓库信息："),_("code",[t._v("git remote show origin")])])]),t._v(" "),_("h4",{attrs:{id:"_10-查询配置信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-查询配置信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.查询配置信息")]),t._v(" "),_("ul",[_("li",[t._v("列出当前配置："),_("code",[t._v("git config --list")])]),t._v(" "),_("li",[t._v("列出repository配置："),_("code",[t._v("git config --local --list")])]),t._v(" "),_("li",[t._v("列出全局配置："),_("code",[t._v("git config --global --list")])]),t._v(" "),_("li",[t._v("列出系统配置："),_("code",[t._v("git config --system --list")])])]),t._v(" "),_("h4",{attrs:{id:"_11-配置用户信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-配置用户信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 11.配置用户信息")]),t._v(" "),_("ul",[_("li",[t._v("配置用户名："),_("code",[t._v('git config --global user.name "your name"')]),t._v(";")]),t._v(" "),_("li",[t._v("配置用户邮箱："),_("code",[t._v('git config --global user.email "youremail@github.com"')]),t._v(";")])]),t._v(" "),_("h4",{attrs:{id:"_12-其他配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-其他配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 12.其他配置")]),t._v(" "),_("ul",[_("li",[t._v("配置git命令输出为彩色的："),_("code",[t._v("git config --global color.ui auto")]),t._v(";")]),t._v(" "),_("li",[t._v("配置git使用的文本编辑器："),_("code",[t._v("git config --global core.editor vi")]),t._v(";")])]),t._v(" "),_("h3",{attrs:{id:"六、配置ssh"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、配置ssh","aria-hidden":"true"}},[t._v("#")]),t._v(" 六、配置SSH")]),t._v(" "),_("h4",{attrs:{id:"_1-查看是否生成了-ssh-公钥"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-查看是否生成了-ssh-公钥","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 查看是否生成了 SSH 公钥")]),t._v(" "),_("blockquote",[_("p",[t._v("$ cd ~/.ssh\n$ ls\nid_rsa      id_rsa.pub      known_hosts")])]),t._v(" "),_("p",[t._v("复制代码其中 id_rsa 是私钥，id_rsa.pub 是公钥。")]),t._v(" "),_("h4",{attrs:{id:"_2-如果没有那就开始生成，设置全局的user-name与user-email"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-如果没有那就开始生成，设置全局的user-name与user-email","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 如果没有那就开始生成，设置全局的user.name与user.email")]),t._v(" "),_("blockquote",[_("p",[t._v('git config --list // 查看是否设置了user.name与user.email，没有的话，去设置\n// 设置全局的user.name与user.email\ngit config --global user.name "XX"\ngit config --global user.email "XX"')])]),t._v(" "),_("h4",{attrs:{id:"_3-输入-ssh-keygen-即可（或ssh-keygen-t-rsa-c-email-）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-输入-ssh-keygen-即可（或ssh-keygen-t-rsa-c-email-）","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 输入 "),_("code",[t._v("ssh-keygen")]),t._v(" 即可（或"),_("code",[t._v('ssh-keygen -t rsa -C "email"')]),t._v("）")]),t._v(" "),_("blockquote",[_("p",[t._v("$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/schacon/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/schacon/.ssh/id_rsa.\nYour public key has been saved in /Users/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:")])]),t._v(" "),_("h4",{attrs:{id:"_4-生成之后获取公钥内容，输入-cat-ssh-id-rsa-pub-即可，-复制ssh-rsa-一直到-local这一整段内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-生成之后获取公钥内容，输入-cat-ssh-id-rsa-pub-即可，-复制ssh-rsa-一直到-local这一整段内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 生成之后获取公钥内容，输入 "),_("code",[t._v("cat ~/.ssh/id_rsa.pub")]),t._v(" 即可， 复制"),_("code",[t._v("ssh-rsa")]),t._v(" 一直到 .local这一整段内容")]),t._v(" "),_("blockquote",[_("p",[t._v("$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== schacon@agadorlaptop.local")])]),t._v(" "),_("h4",{attrs:{id:"_5-打开-gitlab-或者-github，点击头像，找到设置页左侧找到-ssh-keys-按钮并点击，输入刚刚复制的公钥即可"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-打开-gitlab-或者-github，点击头像，找到设置页左侧找到-ssh-keys-按钮并点击，输入刚刚复制的公钥即可","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. 打开 GitLab 或者 GitHub，点击头像，找到设置页左侧找到 SSH keys 按钮并点击，输入刚刚复制的公钥即可")]),t._v(" "),_("p",[_("strong",[t._v("参考")]),t._v(" "),_("a",{attrs:{href:"http://hungyuhei.github.io/2012/08/07/better-git-commit-graph-using-pull---rebase-and-merge---no-ff.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("洁癖者用 Git：pull --rebase 和 merge --no-ff"),_("OutboundLink")],1),t._v("$npsb;\n"),_("a",{attrs:{href:"https://juejin.im/post/5d5d61e96fb9a06ace5254bd",target:"_blank",rel:"noopener noreferrer"}},[t._v("最常见的 Git 问题和操作清单汇总"),_("OutboundLink")],1),t._v("$nbsp;")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.im/post/5ae072906fb9a07a9e4ce596",target:"_blank",rel:"noopener noreferrer"}},[t._v("git基本操作，一篇文章就够了！"),_("OutboundLink")],1),t._v("$nbsp;")])])},[],!1,null,null,null);e.default=v.exports}}]);